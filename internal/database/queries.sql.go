// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createUrl = `-- name: CreateUrl :one
INSERT INTO urls (url, short_code)
VALUES ($1, $2)
RETURNING id, url, short_code, created_at, updated_at
`

type CreateUrlParams struct {
	Url       string
	ShortCode string
}

type CreateUrlRow struct {
	ID        int64
	Url       string
	ShortCode string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (CreateUrlRow, error) {
	row := q.db.QueryRowContext(ctx, createUrl, arg.Url, arg.ShortCode)
	var i CreateUrlRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.ShortCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUrl = `-- name: DeleteUrl :one
DELETE
FROM urls
WHERE short_code = $1
RETURNING id
`

func (q *Queries) DeleteUrl(ctx context.Context, shortCode string) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteUrl, shortCode)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUrl = `-- name: GetUrl :one
SELECT id, url, short_code, created_at, updated_at
FROM urls
WHERE short_code = $1
LIMIT 1
`

type GetUrlRow struct {
	ID        int64
	Url       string
	ShortCode string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetUrl(ctx context.Context, shortCode string) (GetUrlRow, error) {
	row := q.db.QueryRowContext(ctx, getUrl, shortCode)
	var i GetUrlRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.ShortCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementAccessCount = `-- name: IncrementAccessCount :one
UPDATE urls
SET access_count = access_count + 1
WHERE short_code = $1
RETURNING access_count
`

func (q *Queries) IncrementAccessCount(ctx context.Context, shortCode string) (int64, error) {
	row := q.db.QueryRowContext(ctx, incrementAccessCount, shortCode)
	var access_count int64
	err := row.Scan(&access_count)
	return access_count, err
}

const statUrls = `-- name: StatUrls :one
SELECT id, url, short_code, created_at, updated_at, access_count
FROM urls
WHERE short_code = $1
LIMIT 1
`

type StatUrlsRow struct {
	ID          int64
	Url         string
	ShortCode   string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	AccessCount int64
}

func (q *Queries) StatUrls(ctx context.Context, shortCode string) (StatUrlsRow, error) {
	row := q.db.QueryRowContext(ctx, statUrls, shortCode)
	var i StatUrlsRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.ShortCode,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccessCount,
	)
	return i, err
}

const updateUrl = `-- name: UpdateUrl :one
UPDATE urls
SET url = $1, access_count = 0, updated_at = CURRENT_TIMESTAMP
WHERE short_code = $2
RETURNING id, url, short_code, created_at, updated_at
`

type UpdateUrlParams struct {
	Url       string
	ShortCode string
}

type UpdateUrlRow struct {
	ID        int64
	Url       string
	ShortCode string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) (UpdateUrlRow, error) {
	row := q.db.QueryRowContext(ctx, updateUrl, arg.Url, arg.ShortCode)
	var i UpdateUrlRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.ShortCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
